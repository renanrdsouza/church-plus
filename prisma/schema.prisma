// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FinancialContribuition {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  value      Int
  type       String
  member     Member   @relation(fields: [member_id], references: [id])
  member_id  String

  user_id    String
  user       User     @relation(fields: [user_id], references: [id])
}

model Member {
  id                      String                   @id @default(uuid())
  name                    String
  cpf                     String
  birth_date              DateTime
  email                   String                   @unique
  baptism_date            DateTime
  father_name             String
  mother_name             String
  education               String
  profession              String
  financial_contributions FinancialContribuition[]
  phone_list              Phone[]
  address_list            Address[]
  created_at              DateTime                 @default(now())
  updated_at              DateTime                 @updatedAt
  status                  String                   @default("Active")
  user_id                 String
  user                    User                     @relation(fields: [user_id], references: [id])
}

model Address {
  id           String  @id @default(uuid())
  zip_code     String
  number       Int
  street       String
  neighborhood String
  complement   String?
  city         String
  uf           String
  member_id    String
  member       Member  @relation(fields: [member_id], references: [id])
}

model Phone {
  id           String @id @default(uuid())
  phone_number String
  member_id    String
  member       Member @relation(fields: [member_id], references: [id])
}

model User {
  id            String          @id @default(uuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  financial_contributions FinancialContribuition[]
  members       Member[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
